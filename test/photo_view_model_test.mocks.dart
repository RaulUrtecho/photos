// Mocks generated by Mockito 5.4.4 from annotations
// in photos/test/photo_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:photos/models/photo.dart' as _i4;
import 'package:photos/repositories/photos_repository.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PhotosRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotosRepository extends _i1.Mock implements _i2.PhotosRepository {
  @override
  _i3.Stream<List<_i4.Photo>> get photos => (super.noSuchMethod(
        Invocation.getter(#photos),
        returnValue: _i3.Stream<List<_i4.Photo>>.empty(),
        returnValueForMissingStub: _i3.Stream<List<_i4.Photo>>.empty(),
      ) as _i3.Stream<List<_i4.Photo>>);

  @override
  _i3.Future<List<_i4.Photo>> fetchPhotos(
    int? start, {
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPhotos,
          [start],
          {#limit: limit},
        ),
        returnValue: _i3.Future<List<_i4.Photo>>.value(<_i4.Photo>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Photo>>.value(<_i4.Photo>[]),
      ) as _i3.Future<List<_i4.Photo>>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
